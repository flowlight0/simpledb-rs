use std::str::FromStr;
use super::statement;
use super::predicate;
use crate::record::field::{Spec, Value};

grammar;

pub Statement: statement::Statement = {
    <q:Query> => statement::Statement::Query(q),
    <c:UpdateCommand> => statement::Statement::UpdateCommand(c),
}

pub Query: statement::QueryData = {
    "SELECT" <fs:Comma<IdToken>> "FROM" <ts:Comma<IdToken>> "WHERE" <p:Predicate> => statement::QueryData::new(fs, ts, Some(p)),
    "SELECT" <fs:Comma<IdToken>> "FROM" <ts:Comma<IdToken>> => statement::QueryData::new(fs, ts, None),
}

pub UpdateCommand: statement::UpdateCommand = {
    "INSERT INTO" <t:IdToken> "(" <fs:Comma<IdToken>> ")" "VALUES" "(" <vs:Comma<Constant>> ")" => statement::UpdateCommand::Insert(t, fs, vs),
    "DELETE FROM" <t:IdToken> => statement::UpdateCommand::Delete(t, None),
    "DELETE FROM" <t:IdToken> "WHERE" <p:Predicate> => statement::UpdateCommand::Delete(t, Some(p)),
    "MODIFY" <t:IdToken> "SET" <f:IdToken> "=" <e:Expression> => statement::UpdateCommand::Modify(t, f, e, None),
    "MODIFY" <t:IdToken> "SET" <f:IdToken> "=" <e:Expression> "WHERE" <p:Predicate> => statement::UpdateCommand::Modify(t, f, e, Some(p)),
    <c:CreateCommand> => statement::UpdateCommand::Create(c),
}

CreateCommand: statement::CreateCommand = {
    "CREATE TABLE" <t:IdToken> "(" <ds:Comma<FieldDefinition>> ")" => statement::CreateCommand::Table(t, ds),
    "CREATE VIEW" <t:IdToken> "AS" <q:Query> => statement::CreateCommand::View(t, q),
    "CREATE INDEX" <t:IdToken> "ON" <n:IdToken> "(" <f:IdToken> ")" => statement::CreateCommand::Index(t, n, f),
}

FieldDefinition: statement::FieldDefinition = {
    <n:IdToken> <t:FieldType> => statement::FieldDefinition::new(n, t),
}

FieldType: Spec = {
    "I32" => Spec::I32,
    "VARCHAR" "(" <i:I32Constant> ")" => Spec::VarChar(i as usize),
}

pub Predicate: predicate::Predicate = {
    <ts:And<Term>> => predicate::Predicate::new(ts),
}

pub Term: predicate::Term = {
    <l:Expression> "=" <r:Expression> => predicate::Term::Equality(l, r),
}

Expression: predicate::Expression = {
    <i:I32Constant> => predicate::Expression::I32Constant(i),
    <s:StringConstant> => predicate::Expression::StringConstant(s),
    <t:IdToken> => predicate::Expression::Field(t),
}

Constant: Value = {
    <i:I32Constant> => Value::I32(i),
    <s:StringConstant> => Value::String(s),
}

I32Constant: i32 = {
    r"-?[0-9]+" => i32::from_str(<>).unwrap(),
}

StringConstant: String = {
    r"'[^']+'" => String::from(&<>[1..<>.len()-1].to_string()),
}

IdToken: String = {
    r"[a-zA-Z][a-zA-Z0-9_]*" => String::from(<>),
}


Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T> => {
        v.push(e);
        v
    }
};


And<T>: Vec<T> = {
    <mut v:(<T> "AND")*> <e:T> => {
        v.push(e);
        v
    }
};

