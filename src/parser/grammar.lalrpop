use std::str::FromStr;
use super::statement;
use super::predicate;
use super::expression;
use crate::record::field::{Spec, Value};
use crate::materialization::{
    aggregation_function::AggregationFn,
    aggregation_function::AggregationFnControl,
    avg_function::AvgFn,
    count_function::CountFn,
    max_function::MaxFn,
    min_function::MinFn,
    sum_function::SumFn,
};

grammar;

match {
    r"(?i)SELECT" => SELECT,
    r"(?i)FROM" => FROM,
    r"(?i)WHERE" => WHERE,
    r"(?i)INSERT" => INSERT,
    r"(?i)INTO" => INTO,
    r"(?i)VALUES" => VALUES,
    r"(?i)DELETE" => DELETE,
    r"(?i)MODIFY" => MODIFY,
    r"(?i)SET" => SET,
    r"(?i)CREATE" => CREATE,
    r"(?i)TABLE" => TABLE,
    r"(?i)VIEW" => VIEW,
    r"(?i)INDEX" => INDEX,
    r"(?i)GROUP" => GROUP,
    r"(?i)MAX" => MAX,
    r"(?i)MIN" => MIN,
    r"(?i)SUM" => SUM,
    r"(?i)COUNT" => COUNT,
    r"(?i)AVG" => AVG,
    r"(?i)ORDER" => ORDER,
    r"(?i)BY" => BY,
    r"(?i)ON" => ON,
    r"(?i)AS" => AS,
    r"(?i)IS" => IS,
    r"(?i)AND" => AND,
    r"(?i)NULL" => NULL,
    r"(?i)I32" => I32,
    r"(?i)VARCHAR" => VARCHAR,
} else {
    "(" => LPAREN,
    ")" => RPAREN,
    "*" => STAR,
    "/" => SLASH,
    "+" => PLUS,
    "," => COMMA,
    "=" => EQ,
} else {
    r"-?[0-9]+" => I32_LITERAL,
    "-" => MINUS,
    r"'[^']+'" => STRING_LITERAL,
} else {
    r"[a-zA-Z][a-zA-Z0-9_]*" => ID,
} else {
    r"[ \t\n]+" => WHITESPACE,
}

pub Statement: statement::Statement = {
    <q:Query> => statement::Statement::Query(q),
    <c:UpdateCommand> => statement::Statement::UpdateCommand(c),
}

pub Query: statement::QueryData = {
    SELECT <fs:FieldList> FROM <ts:Comma<IdToken>> <p:OptPredicate> <g:OptGroupBy> <o:OptOrderBy> => match fs {
        Some(fields) => {
            let mut output_fields = Vec::new();
            let mut extend_fields = Vec::new();
            let mut aggregation_functions = Vec::new();
            for field in fields.into_iter() {
                match field {
                    statement::SelectField::Expression(expr, alias) => match alias {
                        Some(a) => {
                            output_fields.push(a.clone());
                            extend_fields.push((expr, a));
                        }
                        None => match expr.try_get_field() {
                            Some(f) => output_fields.push(f.to_string()),
                            None => panic!("expression without alias"),
                        },
                    },
                    statement::SelectField::Aggregation(af) => {
                        output_fields.push(af.get_field_name().to_string());
                        aggregation_functions.push(af);
                    }
                }
            }
            statement::QueryData::new_full(
                Some(output_fields),
                ts,
                p,
                g,
                o,
                extend_fields,
                aggregation_functions,
            )
        }
        None => statement::QueryData::new_full(None, ts, p, g, o, Vec::new(), Vec::new()),
    },
}

FieldList: Option<Vec<statement::SelectField>> = {
    STAR => None,
    <fs:Comma<SelectField>> => Some(fs),
};

SelectField: statement::SelectField = {
    <e:Expression> AS <alias:IdToken> => statement::SelectField::Expression(e, Some(alias)),
    <e:Expression> => statement::SelectField::Expression(e, None),
    <a:AggregationFn> => statement::SelectField::Aggregation(a),
};

AggregationFn: AggregationFn = {
    MAX LPAREN <f:IdToken> RPAREN => AggregationFn::from(MaxFn::new(&f)),
    MIN LPAREN <f:IdToken> RPAREN => AggregationFn::from(MinFn::new(&f)),
    SUM LPAREN <f:IdToken> RPAREN => AggregationFn::from(SumFn::new(&f)),
    COUNT LPAREN <f:IdToken> RPAREN => AggregationFn::from(CountFn::new(&f)),
    AVG LPAREN <f:IdToken> RPAREN => AggregationFn::from(AvgFn::new(&f)),
};

OptPredicate: Option<predicate::Predicate> = {
    WHERE <p:Predicate> => Some(p),
    => None,
};

OptGroupBy: Option<Vec<String>> = {
    GROUP BY <os:Comma<IdToken>> => Some(os),
    => None,
};

OptOrderBy: Option<Vec<String>> = {
    ORDER BY <os:Comma<IdToken>> => Some(os),
    => None,
};

pub UpdateCommand: statement::UpdateCommand = {
    INSERT INTO <t:IdToken> LPAREN <fs:Comma<IdToken>> RPAREN VALUES LPAREN <vs:Comma<Constant>> RPAREN => statement::UpdateCommand::Insert(t, fs, vs),
    DELETE FROM <t:IdToken> => statement::UpdateCommand::Delete(t, None),
    DELETE FROM <t:IdToken> WHERE <p:Predicate> => statement::UpdateCommand::Delete(t, Some(p)),
    MODIFY <t:IdToken> SET <f:IdToken> EQ <e:Expression> => statement::UpdateCommand::Modify(t, f, e, None),
    MODIFY <t:IdToken> SET <f:IdToken> EQ <e:Expression> WHERE <p:Predicate> => statement::UpdateCommand::Modify(t, f, e, Some(p)),
    <c:CreateCommand> => statement::UpdateCommand::Create(c),
}

CreateCommand: statement::CreateCommand = {
    CREATE TABLE <t:IdToken> LPAREN <ds:Comma<FieldDefinition>> RPAREN => statement::CreateCommand::Table(t, ds),
    CREATE VIEW <t:IdToken> AS <q:Query> => statement::CreateCommand::View(t, q),
    CREATE INDEX <t:IdToken> ON <n:IdToken> LPAREN <f:IdToken> RPAREN => statement::CreateCommand::Index(t, n, f),
}

FieldDefinition: statement::FieldDefinition = {
    <n:IdToken> <t:FieldType> => statement::FieldDefinition::new(n, t),
}

FieldType: Spec = {
    I32 => Spec::I32,
    VARCHAR LPAREN <i:I32Constant> RPAREN => Spec::VarChar(i as usize),
}

pub Predicate: predicate::Predicate = {
    <ts:And<Term>> => predicate::Predicate::new(ts),
}

pub Term: predicate::Term = {
    <e:Expression> IS NULL => predicate::Term::IsNull(e),
    <l:Expression> EQ <r:Expression> => predicate::Term::Equality(l, r),
}

Expression: expression::Expression = {
    <e:AddExpr> => e,
}

AddExpr: expression::Expression = {
    <l:AddExpr> PLUS <r:MulExpr> => expression::Expression::Add(Box::new(l), Box::new(r)),
    <l:AddExpr> MINUS <r:MulExpr> => expression::Expression::Sub(Box::new(l), Box::new(r)),
    <e:MulExpr> => e,
}

MulExpr: expression::Expression = {
    <l:MulExpr> STAR <r:Factor> => expression::Expression::Mul(Box::new(l), Box::new(r)),
    <l:MulExpr> SLASH <r:Factor> => expression::Expression::Div(Box::new(l), Box::new(r)),
    <e:Factor> => e,
}

Factor: expression::Expression = {
    LPAREN <e:Expression> RPAREN => e,
    NULL => expression::Expression::NullConstant,
    <i:I32Constant> => expression::Expression::I32Constant(i),
    <s:StringConstant> => expression::Expression::StringConstant(s),
    <t:IdToken> => expression::Expression::Field(t),
}

Constant: Value = {
    NULL => Value::Null,
    <i:I32Constant> => Value::I32(i),
    <s:StringConstant> => Value::String(s),
}

I32Constant: i32 = {
    I32_LITERAL => i32::from_str(<>).unwrap(),
}

StringConstant: String = {
    STRING_LITERAL => String::from(&<>[1..<>.len()-1].to_string()),
}

IdToken: String = {
    ID => String::from(<>),
}


Comma<T>: Vec<T> = {
    <mut v:(<T> COMMA)*> <e:T> => {
        v.push(e);
        v
    }
};


And<T>: Vec<T> = {
    <mut v:(<T> AND)*> <e:T> => {
        v.push(e);
        v
    }
};

